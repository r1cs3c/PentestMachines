Description: "Cochlear cloud engineering workshop website service"

Parameters:
  WAFArn: 
    Description: The WAF apply to regional ALB
    Type: String
    Default: arn:aws:wafv2:ap-southeast-2:524767670727:regional/webacl/cochlear-cloud-engineering-nonp-regional-waf/0e202fe9-0eb9-48d4-b731-dd464b20d303

  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id
    Default: vpc-057b2ec513de0e4ca

  PublicSubnets: 
    Description: The list of subnet id
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-0deee677f9298b972,subnet-0b5ccc257ce5a1c8b,subnet-008de8f61214b4cfd
  
  PrivateSubnets:
    Description: The list of subnet id
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-0b2cecd3abc157e1a,subnet-0f063ee27b60bb0ba,subnet-046e04341b0dfb0e0	

  CertificateARN:
    Description: Certificate ARN 
    Type: String
    Default: arn:aws:acm:ap-southeast-2:524767670727:certificate/cd007425-5632-43d2-8719-bb4b92476833	
      
  MaxCount:
    Description: Max Count for Task
    Type: String
    Default: 2

  DesiredCount:
    Description: Desired Count for Task
    Type: String
    Default: 1    

  WebsiteImage:
    Description: Image for website
    Type: String
    Default: 524767670727.dkr.ecr.ap-southeast-2.amazonaws.com/cochlear-cloud-engineering-node:nodegoat_web
  # EnablePassword: 
  #   Description: Enable Login dialog 
  #   Type: String
  #   Default: "true"   
  ECSCluster:
    Description: ECS Cluster Name
    Type: String
    Default: cochlear-cloud-engineering-nonp

  CochlearHTTPSSecurityGroup:
    Description: Id of Security Group Cochlear IP Range for HTTPS
    Type: String
    Default: "sg-083be9fb18e4f34ca"

  Project:
   Description: the name for the project
   Type: String
   Default: cloud-engineering

  Environment:
   Description: the environment for the project
   Type: String
   Default: nonp
  MongoService:
    Description: mongo db address
    Type: String
    Default: 10.114.117.192
  ContainerPort:
    Description: the container expose port
    Type: String
    Default: 4000

# Conditions:

  # DeployWAFV2:
  #   Fn::Not:
  #     - Fn::Equals:
  #       - !Ref WAFV2Arn
  #       - ""
  # DeployCognito:
  #   Fn::Not:
  #     - Fn::Equals:
  #       - !Ref DeployCognito
  #       - "true"
  # PublicAccess:
  #   Fn::Equals:
  #     - !Ref PublicAccess
  #     - "true"

Resources:
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::Join:
        - ''
        - - 'arn:aws:iam::'
          - Ref: AWS::AccountId
          - ':policy/core/PermissionsBoundary'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'secretsmanager:GetSecretValue'
                - 'kms:Decrypt'
                # ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'kms:Decrypt'
                - 'secretsmanager:GetSecretValue'
                - 'ssm:*'
              Resource: '*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref Project
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE
        - EC2
      Cpu: 256
      Memory: 1024
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:

        - Name: httpd
          Essential: true
          Image: !Ref WebsiteImage
          Environment: 
            - Name: MONGODB_URI
              Value: !Sub mongodb://${MongoService}:27017/nodegoat

          Memory: 128
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: httpd

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::Join:
        - ''
        - - 'arn:aws:iam::'
          - Ref: AWS::AccountId
          - ':policy/core/PermissionsBoundary'
      AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'


  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for loadbalancer 
      VpcId: !Ref 'VPC'

  WebsiteSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Security group for website 
        VpcId: !Ref 'VPC'
        SecurityGroupIngress:
          - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
            IpProtocol: -1
    

  WebsiteSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WebsiteSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref WebsiteSecurityGroup      

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref PublicSubnets
      SecurityGroups: 
        - !GetAtt
          - LoadBalancerSecurityGroup
          - GroupId
        - !Ref CochlearHTTPSSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates: 
        - CertificateArn: !Ref CertificateARN
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LoadBalancerListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

      DefaultActions:
        - Type: redirect
          RedirectConfig: 
            Host: "#{host}"
            Path: "/#{path}"
            Port: 443
            Protocol: "HTTPS"
            Query: "#{query}"
            StatusCode: "HTTP_301"


  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      VpcId: !Ref VPC
      Port: !Ref ContainerPort
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      TargetType: ip
      Port: !Ref ContainerPort
      Protocol: HTTP
      Matcher:
        HttpCode: 200-401
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
        - Key: stickiness.enabled
          Value: true

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - Type: forward
          Order: 2
          ForwardConfig: 
            TargetGroups: 
              - TargetGroupArn: !Ref TargetGroup
                Weight: 100


  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::Join:
        - ''
        - - 'arn:aws:iam::'
          - Ref: AWS::AccountId
          - ':policy/core/PermissionsBoundary'

      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action:
            - "sts:AssumeRole"
          Effect: Allow
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - application-autoscaling:*
                - cloudwatch:DescribeAlarms
                - cloudwatch:PutMetricAlarm
                - ecs:DescribeServices
                - ecs:UpdateService
              Resource: "*"
              

  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          Subnets: !Ref PrivateSubnets
          SecurityGroups: 
            - !GetAtt
              - WebsiteSecurityGroup
              - GroupId
      LoadBalancers:
        - ContainerName: "httpd"
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

 
  ServiceScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: !Ref MaxCount
      MinCapacity: !Ref DesiredCount
      ResourceId: !Join
        - /
        - - service
          - !Ref ECSCluster
          - !GetAtt Service.Name
      RoleARN: !GetAtt ECSServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs


  ServiceScaleOutPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 1800
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ServiceScaleInPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 1800
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  CPUScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      # AlarmName: CPU utilization greater than 90%
      AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "3"
      Threshold: "90"
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref ServiceScaleOutPolicy

  CPUScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      # AlarmName: CPU utilization less than 70%
      AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
      Namespace: AWS/ECS
      MetricName: CPUUtilization
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      Statistic: Maximum
      Period: "60"
      EvaluationPeriods: "10"
      Threshold: "70"
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref ServiceScaleInPolicy



Outputs:
  LoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref LoadBalancer

  Listener:
    Description: A reference to  listener
    Value: !Ref LoadBalancerListener
  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt LoadBalancer.DNSName

