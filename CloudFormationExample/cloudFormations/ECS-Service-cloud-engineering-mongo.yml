Description: >
  This template deploys an Application Load Balancer that exposes our various ECS services.
  We create them in a seperate nested template, so it can be referenced by all of the other nested templates.

Parameters:
  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id
    Default: vpc-057b2ec513de0e4ca

  # PublicSubnets: 
  #   Description: The list of subnet id
  #   Type: List<AWS::EC2::Subnet::Id>
  #   Default: subnet-0deee677f9298b972,subnet-0b5ccc257ce5a1c8b,subnet-008de8f61214b4cfd
  
  PrivateSubnets:
    Description: The list of subnet id
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-0b2cecd3abc157e1a,subnet-0f063ee27b60bb0ba,subnet-046e04341b0dfb0e0	

  # CertificateARN:
  #   Description: Certificate ARN 
  #   Type: String
  #   Default: arn:aws:acm:ap-southeast-2:524767670727:certificate/cd007425-5632-43d2-8719-bb4b92476833	
      
  MaxCount:
    Description: Max Count for Task
    Type: String
    Default: 1

  DesiredCount:
    Description: Desired Count for Task
    Type: String
    Default: 1    

  MongoImage:
    Description: Image for Mongo
    Type: String
    Default: 524767670727.dkr.ecr.ap-southeast-2.amazonaws.com/cochlear-cloud-engineering-node:mongo
   
  ECSCluster:
    Description: ECS Cluster Name
    Type: String
    Default: cochlear-cloud-engineering-nonp

  # CochlearHTTPSSecurityGroup:
  #   Description: Id of Security Group Cochlear IP Range for HTTPS
  #   Type: String
  #   Default: "sg-083be9fb18e4f34ca"

  Project:
   Description: the name for the project
   Type: String
   Default: cloud-engineering
  Environment:
   Description: The environment for the project
   Type: String
   Default: nonp
  # HostedZone:
  #   Description: the DNS name of an existing Amazon Route 53 hosted zone
  #   Type: String
  #   Default: sandbox.nonp.cochlear.cloud

# Mappings:
#   loadBalanceHostedZone:
#     us-east-1:
#       id: Z35SXDOTRQ7X7K
#     us-east-2:
#       id: Z3AADJGX6KTTL2
#     us-west-1:
#       id: Z368ELLRRE2KJ0
#     us-west-2:
#       id: Z1H1FL5HABSF5
#     ap-south-1:
#       id: ZP97RAFLXTNZK
#     ap-northeast-1:
#       id: Z14GRHDCWA56QT
#     ap-northeast-2:
#       id: ZWKZPGTI48KDX
#     ap-northeast-3:
#       id: Z5LXEXXYW11ES
#     ap-southeast-1:
#       id: Z1LMS91P8CMLE5
#     ap-southeast-2:
#       id: Z1GM3OXH4ZPM65
#     eu-west-1:
#       id: Z32O12XQLNTSW2
#     eu-west-2:
#       id: ZHURV8PSTC4K8
#     eu-west-3:
#       id: Z3Q77PNBQS71R4

Resources:

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::Join:
        - ''
        - - 'arn:aws:iam::'
          - Ref: AWS::AccountId
          - ':policy/core/PermissionsBoundary'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'secretsmanager:GetSecretValue'
                - 'kms:Decrypt'
                # ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                # - 'kms:Decrypt'
                # - 'secretsmanager:GetSecretValue'
                # - 'ssm:*'
              Resource: '*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref Project
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE
        - EC2
      Cpu: 256
      Memory: 1024
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: mongo
          Image: !Ref MongoImage
          PortMappings: 
            - ContainerPort: 27017
          User: mongodb


  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  WebsiteSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Security group for website 
        VpcId: !Ref 'VPC'
        SecurityGroupIngress:
  
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017 

  WebsiteSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WebsiteSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref WebsiteSecurityGroup      

  Service:
    Type: AWS::ECS::Service
    # DependsOn: ListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # AssignPublicIp: ENABLED
          Subnets: !Ref PrivateSubnets
          SecurityGroups: 
            - !GetAtt
              - WebsiteSecurityGroup
              - GroupId


# Outputs:
#   LoadBalancer:
#     Description: A reference to the Application Load Balancer
#     Value: !Ref LoadBalancer

#   Listener:
#     Description: A reference to  listener
#     Value: !Ref LoadBalancerListener
#   LoadBalancerUrl:
#     Description: The URL of the ALB
#     Value: !GetAtt LoadBalancer.DNSName

  # DomainName: 
  #   Description: Fully qualified domain name
  #   Value: !Ref DNSRecord
